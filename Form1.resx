<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        IeExOUL/QEtW/6nE4v+sxuX/sczs/6zH5f+Norz/ISYs/zQ9Rv8GBwiiAAAACwAAAI0AAACNAAAAjQAA
        AI0AAACNAAAAjQAAAI0AAACNAAAAjQAAAI0AAACNAAAAjQAAAI0AAACNAAAAjQAAAI0AAACNAAAAjQAA
        AIsAAAC5OkNN/Wh4i/9CTFj/rcjo/7XR8v+00fH/t9Pz/4yiu/8xOUL/domd/w8RFNAAAAAZDQ0M/2Rg
        Xv91cW7/dHBt/3Rwbf90cG3/dHBt/3Rwbf90cG3/dHBt/3Rwbf90cG3/dHBt/3Rwbf90cG3/dHBt/3Rw
        bf90cG3/dnFu/1FOS/8UFxn/JCow/z5IU/+uyun/t9Pz/7fT8/+41PX/jaO9/xwgJP8mLDP/AwQEvwAA
        ABIMDAz/X1tZ/29raf9va2j/cGxq/29raf9uamf/bmpo/29raf9va2n/bmpo/25qaP9uamj/bmpo/25q
        aP9uamj/bmpo/25qaP9xbWv/SUZE/xQfLf8cMkv/ISgw/4aZsf+Claz/aXmL/5Kowv9canr/Ex4r/x42
        UP8FCQ3SAAAAGQAAAH0AAAB7AAAAegAAAJcBAQHyJSIg/0tGQv86NjP/CgoJ/wAAAL8AAAB8AAAAewAA
        AHsAAAB7AAAAewAAAHsAAAB7AAAAfgAAAM0BAQD/GSs//0Jzqf8mQF//FyAr/xgjMP8XJzj/GCEs/xgl
        Nf82Xor/OWKQ/wcLEdQAAAAaAAAAKQAAAGkAAABzAAAApTo2M/qEfHX/ZmBa/3tzbP9mX1r/CwoK0QAA
        AHoAAAB0AAAAdAAAAHQAAAB0AAAAdAAAAHMAAAB/ExIR31hSTv8eISX/LlB2/0V4sP8/baD/QG+j/0Nz
        qf8+a57/QXKn/0Jyp/8bLkT/AQIDlwAAAAgKCgrNTktK/VxZV/8cGxr/cmtl/0xHRP83NTT/Lisq/393
        cP8vLCr/QD08/2VhX/9kYF7/ZGBe/2RgXv9kYF7/ZmJg/zUzMv87NzT/pZqR/2NcVv8WIjD/OWOT/y1P
        dP88aJn/R3u0/zBTe/83Xor/LU5z/wQHC88AAAAlAAAAAA0MDP9oZGD/cm5p/yIhH/92bmj/Qj06/0JA
        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
        AA+AAAAf/AAAP/4AAf//AAH//4AD//+AA/8=
</value>
  </data>
</root>